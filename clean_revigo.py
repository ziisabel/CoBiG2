#!/usr/bin/env python3
# coding: utf-8

import os
import os.path
import sys
import mainFunctions as mf


'''Formats the .cvs files retrieved from REVIGO for easier readbility and extraction for plotting'''


def getCleanRevigo(file, revigo_dir, gProfile_dir):
    """
    Creates a dictionary with the content from .tab files generated by clean_gProfiler.py, filered by similariry according to REVIGO output

    Parameters:
        revigo output file
        revigo output directory
        gProfiler cleaned results directory

    Return: list with one file line per item
    """

    comparison = file.split('_')[0]
    regulation = file.split('_')[1].split('.')[0]

    # creates a set with terms filtered by revigo
    revigo = set()
    for line in mf.readFile(revigo_dir + file, True):
        line = [l.replace('\"', '').strip(' ') for l in line.split(',')]
        revigo.add(line[0])

    # creates a dictionary with gProfiler results with GO terms as keys and the enrichment information as value
    gProfiler = {}
    for line in mf.readFile(gProfile_dir + comparison + '_' + regulation + '.tab', True):
        line = [l.strip('\n') for l in line.split('\t')]
        if 'GO:' in line[0]:
            gProfiler[line[2]] = {'Database': line[0][3:], 'Descrition': line[1], 'TermID': line[2], 'padj': line[3], 'Counts': line[4], 'GeneRatio': line[5], 'Comparison': comparison, 'Regulation': regulation}

    # filters the gProfiler dictionary according to the revigo set
    cleanRevigo = {}
    for goid in gProfiler:
        if goid in revigo:
            cleanRevigo[goid] = gProfiler[goid]

    return cleanRevigo


def writeCleanRevigo(outdir, comparison, regulation, cleanRevigo):

    """
    Writes the cleanRevigo dictionary content into a .tab file

    Parameters:
        output directory for written files (cleaned)
        DE comparison
        DEGs regulation
        dictionary outputed by getCleanRevigo function

    Output: .tab file with cleaned revigo results
    """

    with open(outdir + comparison + '_' + regulation + '.tab', 'w') as outfile:
        outfile.write('Database\tDescrition\tTermID\tpadj\tCounts\tGeneRatio\tComparison\tRegulation')

        for goid in cleanRevigo:
            row = []
            for attribute in cleanRevigo[goid]:
                row.append(cleanRevigo[goid][attribute])
            outfile.write('\t'.join(row))

    outfile.close()


# reads the .csv revigo results for every file in a directory and outputs a .tab files with cleaned results for plotting
for file in [f for f in os.listdir(sys.argv[1]) if not f.startswith('.')]:

    comparison = file.split('_')[0]
    regulation = file.split('_')[1].split('.')[0]

    writeCleanRevigo(sys.argv[2], comparison, regulation, getCleanRevigo(file, sys.argv[1], sys.argv[3]))